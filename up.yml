---
- hosts: localhost
  gather_facts: no
  tasks:
    - name: add the firewall rule
      google.cloud.gcp_compute_firewall:
        project: "{{ gcp_project }}"
        name: stream-node
        allowed:
          - ip_protocol: tcp
            ports:
              - '80'
              - '443'
              - '1935'
        target_tags:
          - stream-node
        state: present
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"

    - name: start the instance
      google.cloud.gcp_compute_instance:
        project: "{{ gcp_project }}"
        zone: "{{ gcp_zone }}"
        name: stream-node-1
        machine_type: n1-standard-4
        disks:
          - boot: yes
            auto_delete: yes
            initialize_params:
              source_image: projects/arch-linux-gce/global/images/arch-v20210124
              disk_size_gb: 200
        guest_accelerators:
          - accelerator_type: "projects/{{ gcp_project }}/zones/{{ gcp_zone }}/acceleratorTypes/nvidia-tesla-t4"
            accelerator_count: 1
        network_interfaces:
          - access_configs:
              - name: External NAT
                type: ONE_TO_ONE_NAT
                network_tier: PREMIUM
        tags:
          items:
            - stream-node
        scheduling:
          automatic_restart: no
          on_host_maintenance: TERMINATE
          preemptible: yes
        state: present
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
      register: instance

    - name: wait for the instance to come online
      ansible.builtin.wait_for:
        host: "{{ instance.networkInterfaces[0].accessConfigs[0].natIP }}"
        port: 22
        delay: 5
        timeout: 60

    - name: update the dns record on cloudflare
      community.general.cloudflare_dns:
        zone: archwill.net
        record: stream-hub
        type: A
        value: "{{ instance.networkInterfaces[0].accessConfigs[0].natIP }}"
        solo: yes
        state: present
        account_email: "{{ cf_email }}"
        account_api_token: "{{ cf_token }}"

    - name: add to the play
      ansible.builtin.add_host:
        hostname: "{{ instance.networkInterfaces[0].accessConfigs[0].natIP }}"
        groupname: stream_nodes

    - name: ensure we do not have a conflicting host key locally
      ansible.builtin.lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.ssh/known_hosts"
        regexp: "{{ instance.networkInterfaces[0].accessConfigs[0].natIP | regex_escape() }}"
        state: absent

- hosts: stream_nodes
  connection: ssh
  handlers:
    - name: restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
      become: yes
  tasks:
    - name: full update
      community.general.pacman:
        update_cache: yes
        upgrade: yes
      become: yes
      register: update

    - name: install gpu drivers
      community.general.pacman:
        name:
          - nvidia
        state: latest
      become: yes
      register: drivers

    - name: reboot for updates or drivers install
      ansible.builtin.reboot:
      become: yes
      when: update.changed or drivers.changed

    - name: install nginx
      community.general.pacman:
        name:
          - "{{ nginx_pkg_name }}"
        state: latest
      become: yes
      notify: restart nginx

    - name: install the necessary tools and libs
      community.general.pacman:
        name:
          - base-devel
          - ffmpeg
          - libva-vdpau-driver
          - nvidia-utils
          - "{{ nginx_pkg_name }}"
        state: latest
      become: yes

    - name: import the upstream nginx pgp key
      ansible.builtin.command:
        argv: ['gpg', '--recv-keys', 'B0F4253373F8F6F510D42178520A9993A1C052F8']
      register: result
      changed_when: "'imported' in result.stdout"

    - name: download the nginx-rtmp package
      ansible.builtin.unarchive:
        src: "https://aur.archlinux.org/cgit/aur.git/snapshot/{{ nginx_rtmp_pkg_name }}.tar.gz"
        dest: /tmp
        creates: "/tmp/{{ nginx_rtmp_pkg_name }}"
        remote_src: yes

    - name: build the nginx-rtmp package
      ansible.builtin.command:
        argv: ['makepkg']
        chdir: "/tmp/{{ nginx_rtmp_pkg_name }}"
        creates: "/tmp/{{ nginx_rtmp_pkg_name }}/pkg"
      register: makepkg

    - name: install the nginx-rtmp package
      community.general.pacman:
        name:
          - "/tmp/{{ nginx_rtmp_pkg_name }}/{{ makepkg.stdout | regex_search('Making package:.+$', multiline=True) | regex_replace('^Making package: (\\S+) (\\S+).*$', '\\1-\\2') }}-x86_64.pkg.tar.zst"
        state: present
      become: yes
      when: makepkg.changed
      notify: restart nginx

    - name: configure nginx
      ansible.builtin.copy:
        src: nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
      become: yes
      notify: restart nginx

    - name: download the missing stats stylesheet
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/arut/nginx-rtmp-module/master/stat.xsl
        dest: /usr/share/nginx/html/stat.xsl
        owner: root
        group: root
        mode: '0644'
      become: yes

    - name: make the nginx dash temp directory
      ansible.builtin.file:
        path: /var/lib/nginx/tmp/dash
        owner: http
        group: root
        mode: '0700'
        state: directory
      become: yes

    - name: make the web root directory
      ansible.builtin.file:
        path: /var/www/html
        owner: root
        group: root
        mode: '0755'
        state: directory
      become: yes

    - name: install the stream player page
      ansible.builtin.copy:
        src: stream.html
        dest: /var/www/html/stream.html
        owner: root
        group: root
        mode: '0644'
      become: yes

    - name: enable the nginx service
      ansible.builtin.systemd:
        name: nginx
        enabled: yes
      become: yes
      notify: restart nginx
