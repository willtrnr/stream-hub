---
- hosts: localhost
  gather_facts: no
  tasks:
    - name: create the firewall rules
      gcp_compute_firewall:
        project: "{{ gcp_project }}"
        name: "allow-{{ item.name }}"
        allowed:
          - ip_protocol: tcp
            ports:
              - "{{ item.port }}"
        target_tags:
          - "{{ item.name }}-server"
        state: present
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
      with_items:
        - name: http
          port: '80'
        - name: https
          port: '443'
        - name: rtmp
          port: '1935'

    - name: create the instance
      gcp_compute_instance:
        project: "{{ gcp_project }}"
        zone: "{{ gcp_zone }}"
        name: stream-node
        machine_type: e2-highcpu-4
        disks:
          - auto_delete: yes
            boot: yes
            initialize_params:
              source_image: projects/centos-cloud/global/images/centos-8-v20200714
              disk_size_gb: 20
        network_interfaces:
          - access_configs:
              - name: External NAT
                type: ONE_TO_ONE_NAT
        tags:
          items:
            - http-server
            - https-server
            - rtmp-server
        state: present
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
      register: instance

    - name: wait for the instance to come online
      wait_for:
        host: "{{ instance.networkInterfaces[0].accessConfigs[0].natIP }}"
        port: 22
        delay: 5
        timeout: 60

    - name: update the dns record on cloudflare
      cloudflare_dns:
        zone: archwill.net
        record: stream-hub
        type: A
        value: "{{ instance.networkInterfaces[0].accessConfigs[0].natIP }}"
        solo: yes
        state: present
        account_email: "{{ cf_email }}"
        account_api_token: "{{ cf_token }}"

    - name: add to the play
      add_host:
        hostname: "{{ instance.networkInterfaces[0].accessConfigs[0].natIP }}"
        groupname: stream_nodes

    - name: ensure we do not have a conflicting host key locally
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.ssh/known_hosts"
        regexp: "{{ instance.networkInterfaces[0].accessConfigs[0].natIP | regex_escape() }}"
        state: absent

- hosts: stream_nodes
  connection: ssh
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
  tasks:
    - name: add the epel and rpmfusion repos
      yum:
        name:
          - 'https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm'
          - 'https://download1.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm'
        state: present
      become: yes

    - name: full system update
      yum:
        name: '*'
        state: latest
        update_cache: yes
      become: yes
      register: update

    - name: disable selinux
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: SELINUX=disabled
      become: yes
      register: selinux

    - name: reboot for selinux or kernel update
      reboot:
      become: yes
      when: update.changed or selinux.changed

    - name: install nginx, necessary tools and libs
      yum:
        name:
          - nginx
          - ffmpeg
          - '@development'
          - gd-devel
          - libxslt-devel
          - openssl-devel
          - pcre-devel
          - perl-ExtUtils-Embed
        state: present
      become: yes

    - name: get the nginx version
      shell:
        cmd: "nginx -v 2>&1 | cut -d/ -f2"
      register: nginx_version
      changed_when: False

    - name: download the nginx sources
      unarchive:
        src: "https://nginx.org/download/nginx-{{ nginx_version.stdout }}.tar.gz"
        dest: /tmp
        creates: "/tmp/nginx-{{ nginx_version.stdout }}"
        remote_src: yes

    - name: download the nginx rtmp sources
      unarchive:
        src: "https://github.com/arut/nginx-rtmp-module/archive/v{{ nginx_rtmp_version }}.tar.gz"
        dest: /tmp
        creates: "/tmp/nginx-rtmp-module-{{ nginx_rtmp_version }}"
        remote_src: yes

    - name: get the nginx build arguments
      shell:
        cmd: >-
          nginx -V 2>&1 |
          sed -n 's/^configure arguments: \(.*\)$/\1/p' |
          sed "s/--with-cc-opt='\([^']*\)'/--with-cc-opt='\1 -Wimplicit-fallthrough=0 -Wno-cast-function-type -Wno-error=cast-function-type'/"
      register: nginx_configure_args
      changed_when: False

    - name: configure the build
      shell:
        cmd: >-
          ./configure
          {{ nginx_configure_args.stdout }}
          --add-dynamic-module=../nginx-rtmp-module-{{ nginx_rtmp_version }}
        chdir: "/tmp/nginx-{{ nginx_version.stdout }}"
        creates: "/tmp/nginx-{{ nginx_version.stdout }}/objs/ngx_rtmp_module.so"

    - name: make the nginx rtmp module
      shell:
        cmd: make modules
        chdir: "/tmp/nginx-{{ nginx_version.stdout }}"
        creates: "/tmp/nginx-{{ nginx_version.stdout }}/objs/ngx_rtmp_module.so"

    - name: install the nginx rtmp module in place
      copy:
        src: "/tmp/nginx-{{ nginx_version.stdout }}/objs/ngx_rtmp_module.so"
        dest: /usr/lib64/nginx/modules/ngx_rtmp_module.so
        owner: root
        group: root
        mode: '0755'
        remote_src: yes
      become: yes
      notify: restart nginx

    - name: enable the nginx rtmp module
      copy:
        src: mod-rtmp.conf
        dest: /usr/share/nginx/modules/mod-rtmp.conf
        owner: root
        group: root
        mode: '0644'
      become: yes
      notify: restart nginx

    - name: install the nginx rtmp stats xsl file
      copy:
        src: "/tmp/nginx-rtmp-module-{{ nginx_rtmp_version }}/stat.xsl"
        dest: /usr/share/nginx/html/stat.xsl
        owner: root
        group: root
        mode: '0644'
        remote_src: yes
      become: yes

    - name: configure nginx
      copy:
        src: nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
      become: yes
      notify: restart nginx

    - name: make the nginx dash temp directory
      file:
        path: /var/lib/nginx/tmp/dash
        owner: nginx
        group: root
        mode: '0700'
        state: directory
      become: yes

    - name: make the web root directory
      file:
        path: /var/www/html
        owner: root
        group: root
        mode: '0755'
        state: directory
      become: yes

    - name: install the stream player page
      copy:
        src: stream.html
        dest: /var/www/html/stream.html
        owner: root
        group: root
        mode: '0644'
      become: yes

    - name: enable the nginx service
      systemd:
        name: nginx
        enabled: yes
      become: yes

